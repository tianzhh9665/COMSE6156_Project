{"findings": [{"app": "COMS4170_Project", "type": "extscan", "title": "Possibility for Cross-site scripting (XSS) when the http data at `id in server.py:139` is returned to the user via `server.py:145` without sanitization.", "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n## Additional information\n\n**[Potential XSS](https://cwe.mitre.org/data/definitions/80.html)**", "internal_id": "taint-basic-xss/f97e49ffa8f1a23ba659a799d2ad0f3f", "severity": "moderate", "owasp_category": "a7-xss", "category": "Potential XSS", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "COMS4170_Project", "repositoryUri": "https://github.com/tianzhh9665/COMS4170_Project", "revisionId": "0ee36f8980ec2023070d1d3ec1d9ca067ce73ad1", "branch": "main", "invokedBy": "Carlos G <cargo@dyn-160-39-132-122.dyn.columbia.edu>", "pullRequest": false, "botUser": false}, "name": "Possibility for Cross-site scripting (XSS) when the http data at `id in server.py:139` is returned to the user via `server.py:145` without sanitization.", "tags": "Scan", "fileName": "file:///home/th2888/cs6156/SANGRIA/CULift/server.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 139, "ruleId": "taint-basic-xss", "ruleName": "Potential XSS", "contextText": "def lesson(id=None):\n", "snippetText": "@app.route('/lesson/<id>')\ndef lesson(id=None):\n    global lesson_data\n\n"}, "tags": [{"key": "source_trigger_word", "value": "Framework function URL parameter", "shiftleft_managed": false}, {"key": "source_label", "value": "id", "shiftleft_managed": false}, {"key": "source_type", "value": "Framework_Parameter", "shiftleft_managed": false}, {"key": "sink_trigger_word", "value": "render_template(", "shiftleft_managed": false}, {"key": "sink_label", "value": "~call_1 = ret_flask.render_template(lesson.html, lesson=lesson, lesson_pics=lesson_pics)", "shiftleft_managed": false}, {"key": "sink_type", "value": "ReturnedToUser", "shiftleft_managed": false}]}, {"app": "COMS4170_Project", "type": "extscan", "title": "Possibility for Cross-site scripting (XSS) when the http data at `id in server.py:155` is returned to the user via `server.py:164` without sanitization.", "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n## Additional information\n\n**[Potential XSS](https://cwe.mitre.org/data/definitions/80.html)**", "internal_id": "taint-basic-xss/69293996a0733ce9c79c7f655c271a79", "severity": "moderate", "owasp_category": "a7-xss", "category": "Potential XSS", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "COMS4170_Project", "repositoryUri": "https://github.com/tianzhh9665/COMS4170_Project", "revisionId": "0ee36f8980ec2023070d1d3ec1d9ca067ce73ad1", "branch": "main", "invokedBy": "Carlos G <cargo@dyn-160-39-132-122.dyn.columbia.edu>", "pullRequest": false, "botUser": false}, "name": "Possibility for Cross-site scripting (XSS) when the http data at `id in server.py:155` is returned to the user via `server.py:164` without sanitization.", "tags": "Scan", "fileName": "file:///home/th2888/cs6156/SANGRIA/CULift/server.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 155, "ruleId": "taint-basic-xss", "ruleName": "Potential XSS", "contextText": "def quiz(id=None):\n", "snippetText": "@app.route('/quiz/<id>')\ndef quiz(id=None):\n\n    global quiz_data\n"}, "tags": [{"key": "source_trigger_word", "value": "Framework function URL parameter", "shiftleft_managed": false}, {"key": "source_label", "value": "id", "shiftleft_managed": false}, {"key": "source_type", "value": "Framework_Parameter", "shiftleft_managed": false}, {"key": "sink_trigger_word", "value": "render_template(", "shiftleft_managed": false}, {"key": "sink_label", "value": "~call_2 = ret_flask.render_template(quiz.html, quiz=quiz, total=total)", "shiftleft_managed": false}, {"key": "sink_type", "value": "ReturnedToUser", "shiftleft_managed": false}]}, {"app": "COMS4170_Project", "type": "extscan", "title": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use.", "description": "Flask application is not configured correctly for deployment to production and live environments. Default settings that are more appropriate for development environment are in use.\n\nNOTE: Some recommended settings may have to be set for every route even when using blueprint design pattern.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/configuration.html)**\n\n**[Flask Security Considerations](https://flask.palletsprojects.com/en/1.1.x/security/#security-considerations)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n", "internal_id": "flask-misconfiguration-recommended/22c41b24dda722d55af740ad84e84c55", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Security Misconfiguration", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "COMS4170_Project", "repositoryUri": "https://github.com/tianzhh9665/COMS4170_Project", "revisionId": "0ee36f8980ec2023070d1d3ec1d9ca067ce73ad1", "branch": "main", "invokedBy": "Carlos G <cargo@dyn-160-39-132-122.dyn.columbia.edu>", "pullRequest": false, "botUser": false}, "name": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use.", "tags": "Scan", "fileName": "file:///home/th2888/cs6156/SANGRIA/CULift/server.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-recommended", "ruleName": "Security Misconfiguration", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\nfrom flask import render_template\nfrom flask import Response, request, jsonify, redirect, url_for\napp = Flask(__name__)\n"}, "tags": []}, {"app": "COMS4170_Project", "type": "extscan", "title": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use.", "description": "Flask application is not configured correctly for deployment to production and live environments. Default settings that are more appropriate for development environment are in use.\n\nNOTE: Some recommended settings may have to be set for every route even when using blueprint design pattern.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/configuration.html)**\n\n**[Flask Security Considerations](https://flask.palletsprojects.com/en/1.1.x/security/#security-considerations)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n", "internal_id": "flask-misconfiguration-recommended/22c41b24dda722d55af740ad84e84c55", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Security Misconfiguration", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "COMS4170_Project", "repositoryUri": "https://github.com/tianzhh9665/COMS4170_Project", "revisionId": "0ee36f8980ec2023070d1d3ec1d9ca067ce73ad1", "branch": "main", "invokedBy": "Carlos G <cargo@dyn-160-39-132-122.dyn.columbia.edu>", "pullRequest": false, "botUser": false}, "name": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use.", "tags": "Scan", "fileName": "file:///home/th2888/cs6156/SANGRIA/CULift/server.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-recommended", "ruleName": "Security Misconfiguration", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\nfrom flask import render_template\nfrom flask import Response, request, jsonify, redirect, url_for\napp = Flask(__name__)\n"}, "tags": []}, {"app": "COMS4170_Project", "type": "extscan", "title": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps.", "description": "Flask-Security allows you to quickly add common security mechanisms to your Flask application. Flask-Social can also be used to add social or OAuth login and connection management.\n\n## Additional information\n\n**[OWASP-A6](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration)**\n\n**[Flask Security](https://flask-security.readthedocs.io/en/develop/index.html)**\n\n**[Flask Configuration](https://flask.palletsprojects.com/en/1.1.x/api/#configuration)**\n\n**[Flask Talisman](https://github.com/GoogleCloudPlatform/flask-talisman)**\n", "internal_id": "flask-misconfiguration-controls/22c41b24dda722d55af740ad84e84c55", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "Missing Security Controls", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "COMS4170_Project", "repositoryUri": "https://github.com/tianzhh9665/COMS4170_Project", "revisionId": "0ee36f8980ec2023070d1d3ec1d9ca067ce73ad1", "branch": "main", "invokedBy": "Carlos G <cargo@dyn-160-39-132-122.dyn.columbia.edu>", "pullRequest": false, "botUser": false}, "name": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps.", "tags": "Scan", "fileName": "file:///home/th2888/cs6156/SANGRIA/CULift/server.py", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "flask-misconfiguration-controls", "ruleName": "Missing Security Controls", "contextText": "from flask import Flask\n", "snippetText": "from flask import Flask\nfrom flask import render_template\nfrom flask import Response, request, jsonify, redirect, url_for\napp = Flask(__name__)\n"}, "tags": []}]}