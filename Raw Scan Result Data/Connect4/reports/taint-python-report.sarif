{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Python Security Analysis",
          "rules": [
            {
              "id": "taint-xss",
              "help": {
                "text": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\nCross-site scripting (XSS) vulnerabilities occur when: 1. Untrusted data enters a web application, typically from a web request. 2. The web application dynamically generates a web page that contains this untrusted data. 3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. 4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. 5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. 6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.",
                "markdown": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\nCross-site scripting (XSS) vulnerabilities occur when: 1. Untrusted data enters a web application, typically from a web request. 2. The web application dynamically generates a web page that contains this untrusted data. 3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. 4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. 5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. 6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious."
              },
              "name": "XSS",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "shortDescription": {
                "text": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')."
              }
            },
            {
              "id": "flask-misconfiguration-recommended",
              "help": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.",
                "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."
              },
              "name": "Security Misconfiguration",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/732.html",
              "shortDescription": {
                "text": "Incorrect Permission Assignment for Critical Resource."
              }
            },
            {
              "id": "flask-misconfiguration-controls",
              "help": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.",
                "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."
              },
              "name": "Missing Security Controls",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/732.html",
              "shortDescription": {
                "text": "Incorrect Permission Assignment for Critical Resource."
              }
            }
          ],
          "version": "1.0.0-scan",
          "fullName": "Python Security Analysis"
        }
      },
      "conversion": {
        "tool": {
          "driver": {
            "name": "@ShiftLeft/sast-scan"
          }
        },
        "invocation": {
          "arguments": [
            "-j",
            "-a",
            "e",
            "-o",
            "/app/reports/taint-python-report.json"
          ],
          "executionSuccessful": true,
          "commandLine": "-j -a e -o /app/reports/taint-python-report.json",
          "endTimeUtc": "2022-05-07T18:03:20Z",
          "workingDirectory": {
            "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4"
          }
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "endTimeUtc": "2022-05-07T18:03:20Z",
          "workingDirectory": {
            "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4"
          }
        }
      ],
      "properties": {
        "metrics": {
          "total": 4,
          "critical": 0,
          "high": 1,
          "medium": 2,
          "low": 1
        }
      },
      "results": [
        {
          "message": {
            "markdown": "",
            "text": "Cross-site scripting (XSS) vulnerability with data reaching from `app.py:58` to `app.py:61` without sanitization."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        player1_color = request.args.get('color','')\n"
                  },
                  "startLine": 58
                },
                "artifactLocation": {
                  "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4/app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "    try:\n        player1_color = request.args.get('color','')\n        game.set_player_1(player1_color)\n\n"
                  },
                  "endLine": 60,
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "HIGH",
            "issue_tags": {
              "source_trigger_word": "request.args.get(",
              "source_label": "~call_1 = ret_flask.request.args.get(color, )",
              "source_type": "UserControlled_Parameter",
              "sink_trigger_word": "render_template(",
              "sink_label": "~call_3 = ret_flask.render_template(player1_connect.html, status=player1_color)",
              "sink_type": "ReturnedToUser"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "654219b999f8a793",
            "scanTagsHash": "0810003f64950b81",
            "scanFileHash": "756899f4279b43fe"
          },
          "ruleId": "taint-xss",
          "ruleIndex": 0
        },
        {
          "message": {
            "markdown": "",
            "text": "Security Misconfiguration with the config `PREFERRED_URL_SCHEME` not set to the recommended value `https` for production use."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from re import match\n"
                  },
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4/app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from re import match\nfrom flask import Flask, render_template, request, redirect, jsonify\nfrom json import dump\nfrom Gameboard import Gameboard\n"
                  },
                  "endLine": 4,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "4b9994ccb5ae2c93",
            "scanFileHash": "756899f4279b43fe"
          },
          "ruleId": "flask-misconfiguration-recommended",
          "ruleIndex": 1
        },
        {
          "message": {
            "markdown": "",
            "text": "Security Misconfiguration with the config `SESSION_COOKIE_SECURE` not set to the recommended value `True` for production use."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from re import match\n"
                  },
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4/app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from re import match\nfrom flask import Flask, render_template, request, redirect, jsonify\nfrom json import dump\nfrom Gameboard import Gameboard\n"
                  },
                  "endLine": 4,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "4b9994ccb5ae2c93",
            "scanFileHash": "756899f4279b43fe"
          },
          "ruleId": "flask-misconfiguration-recommended",
          "ruleIndex": 1
        },
        {
          "message": {
            "markdown": "",
            "text": "Consider adding Flask-Security and Flask-Talisman security extensions to your Flask apps."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "from re import match\n"
                  },
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "file:///home/th2888/cs6156/SANGRIA/Connect4/app.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "from re import match\nfrom flask import Flask, render_template, request, redirect, jsonify\nfrom json import dump\nfrom Gameboard import Gameboard\n"
                  },
                  "endLine": 4,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "LOW",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "4b9994ccb5ae2c93",
            "scanFileHash": "756899f4279b43fe"
          },
          "ruleId": "flask-misconfiguration-controls",
          "ruleIndex": 2
        }
      ],
      "automationDetails": {
        "description": {
          "text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"
        },
        "guid": "b14f7328-7cd4-49b6-8278-038775967061"
      },
      "versionControlProvenance": [
        {
          "branch": "",
          "repositoryUri": "",
          "revisionId": ""
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "inlineExternalProperties": [
    {
      "guid": "b14f7328-7cd4-49b6-8278-038775967061",
      "runGuid": "19486a4a-d269-4f02-83d8-bc55944ec024"
    }
  ]
}